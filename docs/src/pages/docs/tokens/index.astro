---
import JSONYaml from '../../../components/JSONYaml.astro';
import Token from '../../../components/Token.astro';
import Layout from '../../../layouts/docs.astro';

const title = 'Tokens';

const tokenDef = {
  border: 'https://design-tokens.github.io/community-group/format/#border',
  color: 'https://design-tokens.github.io/community-group/format/#color',
  cubicBezier: 'https://design-tokens.github.io/community-group/format/#cubic-bezier',
  dimension: 'https://design-tokens.github.io/community-group/format/#dimension',
  duration: 'https://design-tokens.github.io/community-group/format/#duration',
  fontFamily: 'https://design-tokens.github.io/community-group/format/#font-family',
  fontWeight: 'https://design-tokens.github.io/community-group/format/#font-weight',
  number: 'https://design-tokens.github.io/community-group/format/#number',
  gradient: 'https://design-tokens.github.io/community-group/format/#gradient',
  shadow: 'https://design-tokens.github.io/community-group/format/#shadow',
  strokeStyle: 'https://design-tokens.github.io/community-group/format/#stroke-style',
  transition: 'https://design-tokens.github.io/community-group/format/#transition',
  typography: 'https://design-tokens.github.io/community-group/format/#typography',
};
---

<Layout content={{title}}>
  <h1>Tokens</h1>

  <p>
    Tokens are defined via the <a href="https://design-tokens.github.io/community-group/format/" target="_blank">the W3C Design Tokens format</a> schema (Apr 2023). Cobalt supports 100% of the spec, but with the following changes:
  </p>

  <ul>
    <li>Cobalt supports assets via the <a href="#link">link</a> type</li>
    <li>Cobalt introduces the concept of <a href="#modes">Modes</a></li>
    <li>Cobalt ignores unknown properties rather than throwing errors as the spec requires.</li>
  </ul>

  <p>Any other deviations can be treated as unintentional (please <a href="https://github.com/drwpow/cobalt-ui/issues">file an issue!</a>).</p>

  <h2 id="color">
    <Token type="color" />
    Color
  </h2>

  <p>A CSS-valid color as defined in <a href={tokenDef.color} target="_blank"><b>8.1</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>color</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>string</code></td>
        <td>Though the spec limits valid colors to hex, Cobalt allows any color (parsed by <a href="https://culorijs.org/" target="_blank">culori</a>, a fast and accurate color library)</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "blue": {
    "60": {
      "$type": "color",
      "$value": "oklch(60% 0.216564 269)"
    }
  }
}`}
  />

  <h2 id="fontFamily">
    <Token type="fontFamily" />
    Font Family
  </h2>

  <p>A font name as defined in <a href={tokenDef.fontFamily} target="_blank"><b>8.3</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>fontFamily</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>string | string[]</code></td>
        <td>Either a string for a single font name, or an array of strings to include fallbacks (most preferred first)</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "no-fallbacks": {
    "$type": "fontFamily",
    "$value": "Graphik Regular"
  },
  "with-fallbacks": {
    "$type": "fontFamily",
    "$value": ["Graphik Regular", "-system-ui", "Helvetica", "sans-serif"]
  }
}`}
  />

  <h2 id="font-weight">
    <Token type="fontWeight" />
    Font Weight
  </h2>

  <p>A font weight as defined in <a href={tokenDef.fontWeight} target="_blank"><b>8.4</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>fontWeight</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>number | string</code></td>
        <td>Either a font weight number, or an <a href="https://design-tokens.github.io/community-group/format/#font-weight" target="_blank">approved alias</a> of a font weight number.</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "font-weight-default": {
    "$value": 350,
    "$type": "fontWeight"
  },
  "font-weight-thick": {
    "$value": "extra-bold",
    "$type": "fontWeight"
  }
}`}

  />

  <h2 id="dimension">
    <Token type="dimension" />
    Dimension
  </h2>

  <p>A unit of distance as defined in <a href={tokenDef.dimension} target="_blank"><b>8.2</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>dimension</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>string</code></td>
        <td>A dimension, with units</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "space": {
    "md": {
      "$type": "dimension",
      "$value": "16px"
    },
    "lg": {
      "$type": "dimension",
      "$value": "32px"
    }
  }
}`}
  />

  <h2 id="duration">
    <Token type="duration" />
    Duration
  </h2>

  <p>A length of time as defined in <a href={tokenDef.duration} target="_blank"><b>8.5</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>duration</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>string</code></td>
        <td>A length of time, suffixed either by <b>ms</b> (milliseconds) or <b>s</b> (seconds)</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "quick": {
    "$type": "duration",
    "$value": "100ms"
  },
  "moderate": {
    "$type": "duration",
    "$value": "0.25s"
  }
}`}
  />

  <h2 id="cubic-bezier">
    <Token type="cubic-bezier" />
    Cubic b√©zier
  </h2>

  <p>An easing curve as defined in <a href={tokenDef.cubicBezier} target="_blank"><b>8.6</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>cubicBezier</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>[number, number, number, number]</code></td>
        <td>An array of four numbers [ùë•1, ùë¶1, ùë•2, ùë¶2] that behaves the same as a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function" target="_blank">CSS easing function</a>.</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "linear": {
    "$type": "cubicBezier",
    "$value": [0, 0, 1, 1]
  },
  "easeOutCubic": {
    "$type": "cubicBezier",
    "$value": [0.33, 1, 0.68, 1]
  },
  "easeInCubic": {
    "$type": "cubicBezier",
    "$value": [0.32, 0, 0.67, 0]
  },
  "easeInOutCubic": {
    "$type": "cubicBezier",
    "$value": [0.65, 0, 0.35, 1]
  }
}`}
  />

  <h2 id="number">
    <Token type="number" />
    Number
  </h2>

  <p>A number as defined in <a href={tokenDef.number} target="_blank"><b>8.7</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>number</code></td>
        <td><b>number</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>number</code></td>
        <td>A number, which can be positive, negative, or a fraction.</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "large": {
    "$type": "number",
    "$value": 100
  }
}`}
  />

  <h2 id="link">
    <Token type="link" />
    Link
  </h2>

  <p><strong>Cobalt extension</strong>. A link to a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank">resource</a> such as an image.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>link</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>string</code></td>
        <td>Path to a resource, which can either be a partial (local) or complete (remote) URL.</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "iconAlert": {
    "$type": "link",
    "$value": "/assets/icons/alert.svg"
  }
}`}
  />

  <h2 id="stroke-style">
    <Token type="stroke-style" />
    Stroke style
  </h2>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>strokeStyle</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>string</code></td>
        <td>Must be one of <code>solid</code>, <code>dashed</code>, <code>dotted</code>, <code>double</code>, <code>groove</code>, <code>ridge</code>, <code>outset</code>, <code>inset</code></td>
      </tr>
    </tbody>
  </table>

  <p>A type of stroke as defined in <a href={tokenDef.strokeStyle} target="_blank"><b>9.2</b></a>.</p>

  <JSONYaml
    code={`{
  "focus-ring-style": {
    "$type": "strokeStyle",
    "$value": "dashed"
  }
}`}
  />

  <h2 id="border">
    <Token type="border" />
    Border
  </h2>

  <p>A border as defined in <a href={tokenDef.border} target="_blank"><b>9.3</b></a> consisting of a <a href="#color">color</a>, <a href="#dimension">width</a>, and <a href="#stroke-style">style</a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>border</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>string</code></td>
        <td>Specify a <a href="#color">color</a>, <a href="#dimension">width</a>, and <a href="#stroke-style">style</a> for this token (all required).</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "heavy": {
    "$type": "border",
    "$value": {
      "color": "#36363600",
      "width": "3px",
      "style": "solid"
    }
  }
}`}
  />

  <h2 id="transition">
    <Token type="transition" />
    Transition
  </h2>

  <p>A composite type combining <a href="#duration">duration</a> and <a href="#cubic-bezier">cubicBezier</a> types to form a CSS transition, as defined in <a href={tokenDef.transition} target="_blank"><b>9.4</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>transition</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>object</code></td>
        <td>Specify a <a href="#duration">duration</a>, <a href="#duration">delay</a>, and <a href="#cubic-bezier">timingFunction</a> that combine to make the transition. <b>delay</b> is optional (defaults to <code>0</code>).</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "easeOutQuick": {
    "$type": "transition",
    "$value": {
      "duration": "150ms",
      "delay": "0ms",
      "timingFunction": [0.33, 1, 0.68, 1]
    }
  }
}`}
  />

  <h2 id="shadow">
    <Token type="shadow" />
    Shadow
  </h2>

  <p>A composite type combining <a href="#dimension">dimension</a> with a <a href="#color">color</a> to form a CSS <code>box-shadow</code>, as defined in <a href={tokenDef.shadow} target="_blank"><b>9.5</b></a></p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>shadow</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>object</code></td>
        <td
          >Specify a <a href="#dimension">offsetX</a>, <a href="#dimension">offsetY</a>, <a href="#dimension">blur</a>, <a href="#dimension">spread</a>, and <a href="#color">color</a> to form a shadow. <b>color</b> is the only required prop.</td
        >
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "shadow-md": {
    "$type": "shadow",
    "$value": {
      "offsetX": "0px",
      "offsetY": "4px",
      "blur": "8px",
      "spread": 0,
      "color": "rgb(0, 0, 0, 0.15)"
    }
  }
}`}
  />

  <h2 id="gradient">
    <Token type="gradient" />
    Gradient
  </h2>

  <p>A composite type combining <a href="#color">color</a> and <a href="#dimension">percentages</a> (normalized to <b>1</b>) to form the stops of a CSS gradient, as defined in <a href={tokenDef.gradient} target="_blank"><b>9.6</b></a>.</p>

  <p>
    <i
      >Note: you‚Äôll notice that there‚Äôs information missing on whether this is a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient" target="_blank">linear</a>, <a
        href="https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient"
        target="_blank">radial</a
      >, or <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient" target="_blank">conic</a> gradient</i
    >
  </p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>gradient</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>{'{'}color: string, position: number{'}'}[]</code></td>
        <td>Array of stops that provdide both a <a href="#color">color</a> and <a href="#dimension">position</a>, from <code>0</code> (0%) to <code>1</code> (100%).</td>
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "rainbow": {
    "$type": "gradient",
    "$value": [
      {"color": "red",       "position": 0},
      {"color": "orange",    "position": 0.175},
      {"color": "yellow",    "position": 0.325},
      {"color": "lawngreen", "position": 0.5},
      {"color": "blue",      "position": 0.675},
      {"color": "indigo",    "position": 0.825},
      {"color": "violet",    "position": 1}
    ]
  }
}`}
  />

  <h2 id="typography">
    <Token type="typography" />
    Typography
  </h2>

  <p>A composite type combining <b>font</b> and <b>dimension</b> to form a complete typographic style, as defined in <a href={tokenDef.typography} target="_blank"><b>9.7</b></a>.</p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td><b>typography</b></td>
      </tr>
      <tr>
        <td><code>$value</code></td>
        <td><code>object</code></td>
        <td
          >Specify any typographic CSS properties in <em>camelCase</em> format. Although the spec <a href={tokenDef.typography} target="_blank">limits the properties</a> to only a few, Cobalt allows any valid attributes including <b
            >letterSpacing</b
          >, <b>fontVariant</b>, etc.</td
        >
      </tr>
    </tbody>
  </table>

  <JSONYaml
    code={`{
  "body": {
    "$type": "typography",
    "$value": {
      "fontFamily": ["Helvetica", "-system-ui", "sans-serif"],
      "fontSize": "24px",
      "fontStyle": "normal",
      "fontWeight": 400,
      "letterSpacing": 0,
      "lineHeight": 1.5,
      "textTransform": "none"
    }
  }
}`}
  />

  <h2>Groups</h2>

  <p>
    A group is a way to collect similar tokens. A group is made by omitting <code>$value</code> (and it is impossible for a group to have a <code>$value</code>). In the schema, all reserved names start with a <code>$</code>. All other
    properties will be treated either as tokens or other sub-groups.
  </p>

  <table>
    <thead>
      <th>Property</th>
      <th>Type</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <td><code>$description</code></td>
        <td><code>string</code></td>
        <td>(optional) Set a human-readable description for this group</td>
      </tr>
      <tr>
        <td><code>$type</code></td>
        <td><code>string</code></td>
        <td>(optional) Lets child tokens omit <code>$type</code> and will use this instead (can be overridden per-token)</td>
      </tr>
      <tr>
        <td><code>$extensions</code></td>
        <td><code>object</code></td>
        <td>(optional) Any arbitrary data is allowed within `$extensions` object.</td>
      </tr>
      <tr>
        <td><code>$extensions.requiredModes</code></td>
        <td><code>string[]</code></td>
        <td>(optional) <b>Cobalt</b>: Enforce <a href="/docs/guides/modes">mode IDs</a> that must be present on all child tokens</td>
      </tr>
    </tbody>
  </table>

  <h4>Example</h4>

  <p>
    In this example, both <code>color</code> and <code>typography</code> are groups, as neither have a <code>$value</code>. But <code>typography</code> also has a subgroup: <code>family</code>. Groups can be nested infinitely, as long as
    they‚Äôre not inside tokens.
  </p>

  <JSONYaml
    code={`{
  "color": {
    "$description": "color palette",
    "red": {
      "$type": "color",
      "$value": "#fa4549"
    }
  },
  "typography": {
    "$description": "Typographic styles",
    "family": {
      "GraphikRegular": {
        "$type": "fontFamily",
        "$value": "Graphik Regular"
      }
    }
  }
}`}
  />

  <h2 id="custom-types">Custom types</h2>

  <p>
    Any other <code>$type</code> will be treated as a custom type. <code>$value</code> may have any shape desired. But note that custom types will likely break existing plugins unless you configure them (the CSS and Sass plugins have a <b
      >transformer</b
    > option), or unless you write your own plugin for Cobalt (which is easier than some may think!).
  </p>

  <p><i>Should a type be added?<a href="https://github.com/design-tokens/community-group">Suggest it be added!</a></i></p>

  <h2 id="aliasing">Aliasing</h2>

  <p>
    Types can be aliased <a href="https://design-tokens.github.io/community-group/format/#aliases-references" target="_blank">as defined in the Design Tokens spec</a> by using dot-delimited path syntax, wrapped in curly braces (e.g., <code
      >{'{'}groupA.groupB.token{'}'}</code
    >):
  </p>

  <JSONYaml
    code={`{
  "color": {
    "blue": {
      "$type": "color",
      "$value": "#218bff"
    },
    "green": {
      "$type": "color",
      "$value": "#6fdd8b"
    },
    "action": {
      "$type": "color",
      "$value": "{color.blue}"
    }
  },
  "gradient": {
    "$type": "gradient",
    "$value": [
      {"color": "{color.blue}",  "position": 0},
      {"color": "{color.green}", "position": 1}
    ]
  }
}`}
  />

  <h2 id="modes">Modes</h2>

  <p>
    <a href="/docs/guides/modes">Modes</a> are alternate versions of your tokens. For example, say your design system has a <b>standard</b> palette and an alternate version optimized for <b>colorblind</b> users. Here‚Äôs one way you could declare
    that:
  </p>

  <JSONYaml
    code={`{
  "red": {
    "$type": "color",
    "$value": "#cf222e"
  },
  "redColorblind": {
    "$type": "color",
    "$value": "#ac5e00"
  }
}`}
  />

  <p>This <em>works</em> but has several problems:</p>

  <ul>
    <li>‚ùå multiple palettes are mixed into one</li>
    <li>‚ùå this suggests <b>red</b> and <b>redColorblind</b> should be used alongside one another (defeating the whole purpose!)</li>
    <li>‚ùå it‚Äôs unclear what the purpose of <b>redColorblind</b> is, and will likely be avoided by engineers</li>
  </ul>

  <p>To address all these, let‚Äôs use modes instead by adding an <b>$extensions.mode</b> property:</p>

  <JSONYaml
    code={`{
  "red": {
    "$type": "token",
    "$value": "#cf222e",
    "$extensions": {
      "mode": {
        "standard": "#cf222e",
        "colorblind": "#ac5e00"
      }
    }
  }
}`}
  />

  <p>This is much better:</p>

  <ul>
    <li>‚úÖ palettes are kept separate</li>
    <li>‚úÖ when <b>colorblind</b> mode is enabled, it prevents standard red from being used</li>
    <li>‚úÖ in code, switching from <b>standard</b> to <b>colorblind</b> mode automatically creates the palette</li>
  </ul>

  <p>There‚Äôs a lot of flexibility you can unlock with modes. <a href="/docs/guides/modes">Read more about using modes</a></p>

  <h2>Examples</h2>

  <p>Some examples of open design systems using the W3C Design Tokens Community format</p>

  <p><i>Note: all examples are unofficial and for demonstration purposes only; all companies referenced retain full ownership over their respective systems, and are unaffiliated with this project:</i></p>

  <ul>
    <li><a href="https://github.com/drwpow/cobalt-ui/tree/main/examples/github">GitHub Primer</a></li>
    <li><a href="https://github.com/drwpow/cobalt-ui/tree/main/examples/ibm">IBM Carbon</a></li>
    <li><a href="https://github.com/drwpow/cobalt-ui/tree/main/examples/adobe">Adobe Spectrum</a></li>
    <li><a href="https://github.com/drwpow/cobalt-ui/tree/main/examples/salesforce">Salesforce Lightning</a></li>
    <li><a href="https://github.com/drwpow/cobalt-ui/tree/main/examples/shopify">Shopify Polaris</a></li>
    <li><a href="https://github.com/drwpow/cobalt-ui/tree/main/examples/apple">Apple Human Interface Guidelines</a></li>
  </ul>
</Layout>

<style lang="scss">
  @use '../../../../tokens/index' as *;

  :global(.token) {
    position: absolute;
    right: calc(100% + #{token('space.md')});
    top: 50%;
  }
</style>
