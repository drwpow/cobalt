/**
 * Design Tokens
 * Autogenerated from tokens.json.
 * DO NOT EDIT!
 */

import {
  ParsedColorToken,
  ParsedDimensionToken,
  ParsedFontFamilyToken,
} from '@cobalt-ui/core';

export declare const tokens: {
  'color.black': ParsedColorToken['$value'];
  'color.blue': ParsedColorToken['$value'];
  'color.blueDark': ParsedColorToken['$value'];
  'color.blueDarker': ParsedColorToken['$value'];
  'color.blueLight': ParsedColorToken['$value'];
  'color.blueLighter': ParsedColorToken['$value'];
  'color.blueText': ParsedColorToken['$value'];
  'color.green': ParsedColorToken['$value'];
  'color.greenDark': ParsedColorToken['$value'];
  'color.greenDarker': ParsedColorToken['$value'];
  'color.greenLight': ParsedColorToken['$value'];
  'color.greenLighter': ParsedColorToken['$value'];
  'color.greenText': ParsedColorToken['$value'];
  'color.indigo': ParsedColorToken['$value'];
  'color.indigoDark': ParsedColorToken['$value'];
  'color.indigoDarker': ParsedColorToken['$value'];
  'color.indigoLight': ParsedColorToken['$value'];
  'color.indigoLighter': ParsedColorToken['$value'];
  'color.indigoText': ParsedColorToken['$value'];
  'color.ink': ParsedColorToken['$value'];
  'color.inkLight': ParsedColorToken['$value'];
  'color.inkLighter': ParsedColorToken['$value'];
  'color.inkLightest': ParsedColorToken['$value'];
  'color.orange': ParsedColorToken['$value'];
  'color.orangeDark': ParsedColorToken['$value'];
  'color.orangeDarker': ParsedColorToken['$value'];
  'color.orangeLight': ParsedColorToken['$value'];
  'color.orangeLighter': ParsedColorToken['$value'];
  'color.orangeText': ParsedColorToken['$value'];
  'color.purple': ParsedColorToken['$value'];
  'color.purpleDark': ParsedColorToken['$value'];
  'color.purpleDarker': ParsedColorToken['$value'];
  'color.purpleLight': ParsedColorToken['$value'];
  'color.purpleLighter': ParsedColorToken['$value'];
  'color.purpleText': ParsedColorToken['$value'];
  'color.red': ParsedColorToken['$value'];
  'color.redDark': ParsedColorToken['$value'];
  'color.redDarker': ParsedColorToken['$value'];
  'color.redLight': ParsedColorToken['$value'];
  'color.redLighter': ParsedColorToken['$value'];
  'color.redText': ParsedColorToken['$value'];
  'color.sky': ParsedColorToken['$value'];
  'color.skyDark': ParsedColorToken['$value'];
  'color.skyLight': ParsedColorToken['$value'];
  'color.skyLighter': ParsedColorToken['$value'];
  'color.teal': ParsedColorToken['$value'];
  'color.tealDark': ParsedColorToken['$value'];
  'color.tealDarker': ParsedColorToken['$value'];
  'color.tealLight': ParsedColorToken['$value'];
  'color.tealLighter': ParsedColorToken['$value'];
  'color.tealText': ParsedColorToken['$value'];
  'color.white': ParsedColorToken['$value'];
  'color.yellow': ParsedColorToken['$value'];
  'color.yellowDark': ParsedColorToken['$value'];
  'color.yellowDarker': ParsedColorToken['$value'];
  'color.yellowLight': ParsedColorToken['$value'];
  'color.yellowLighter': ParsedColorToken['$value'];
  'color.yellowText': ParsedColorToken['$value'];
  'font.family.base': ParsedFontFamilyToken['$value'];
  'font.family.mono': ParsedFontFamilyToken['$value'];
  'space.base': ParsedDimensionToken['$value'];
  'space.baseTight': ParsedDimensionToken['$value'];
  'space.extraLoose': ParsedDimensionToken['$value'];
  'space.extraTight': ParsedDimensionToken['$value'];
  'space.loose': ParsedDimensionToken['$value'];
  'space.none': ParsedDimensionToken['$value'];
  'space.tight': ParsedDimensionToken['$value'];
};

export declare const meta: {
  'color.black': ParsedColorToken;
  'color.blue': ParsedColorToken;
  'color.blueDark': ParsedColorToken;
  'color.blueDarker': ParsedColorToken;
  'color.blueLight': ParsedColorToken;
  'color.blueLighter': ParsedColorToken;
  'color.blueText': ParsedColorToken;
  'color.green': ParsedColorToken;
  'color.greenDark': ParsedColorToken;
  'color.greenDarker': ParsedColorToken;
  'color.greenLight': ParsedColorToken;
  'color.greenLighter': ParsedColorToken;
  'color.greenText': ParsedColorToken;
  'color.indigo': ParsedColorToken;
  'color.indigoDark': ParsedColorToken;
  'color.indigoDarker': ParsedColorToken;
  'color.indigoLight': ParsedColorToken;
  'color.indigoLighter': ParsedColorToken;
  'color.indigoText': ParsedColorToken;
  'color.ink': ParsedColorToken;
  'color.inkLight': ParsedColorToken;
  'color.inkLighter': ParsedColorToken;
  'color.inkLightest': ParsedColorToken;
  'color.orange': ParsedColorToken;
  'color.orangeDark': ParsedColorToken;
  'color.orangeDarker': ParsedColorToken;
  'color.orangeLight': ParsedColorToken;
  'color.orangeLighter': ParsedColorToken;
  'color.orangeText': ParsedColorToken;
  'color.purple': ParsedColorToken;
  'color.purpleDark': ParsedColorToken;
  'color.purpleDarker': ParsedColorToken;
  'color.purpleLight': ParsedColorToken;
  'color.purpleLighter': ParsedColorToken;
  'color.purpleText': ParsedColorToken;
  'color.red': ParsedColorToken;
  'color.redDark': ParsedColorToken;
  'color.redDarker': ParsedColorToken;
  'color.redLight': ParsedColorToken;
  'color.redLighter': ParsedColorToken;
  'color.redText': ParsedColorToken;
  'color.sky': ParsedColorToken;
  'color.skyDark': ParsedColorToken;
  'color.skyLight': ParsedColorToken;
  'color.skyLighter': ParsedColorToken;
  'color.teal': ParsedColorToken;
  'color.tealDark': ParsedColorToken;
  'color.tealDarker': ParsedColorToken;
  'color.tealLight': ParsedColorToken;
  'color.tealLighter': ParsedColorToken;
  'color.tealText': ParsedColorToken;
  'color.white': ParsedColorToken;
  'color.yellow': ParsedColorToken;
  'color.yellowDark': ParsedColorToken;
  'color.yellowDarker': ParsedColorToken;
  'color.yellowLight': ParsedColorToken;
  'color.yellowLighter': ParsedColorToken;
  'color.yellowText': ParsedColorToken;
  'font.family.base': ParsedFontFamilyToken;
  'font.family.mono': ParsedFontFamilyToken;
  'space.base': ParsedDimensionToken;
  'space.baseTight': ParsedDimensionToken;
  'space.extraLoose': ParsedDimensionToken;
  'space.extraTight': ParsedDimensionToken;
  'space.loose': ParsedDimensionToken;
  'space.none': ParsedDimensionToken;
  'space.tight': ParsedDimensionToken;
};

export declare const modes: Record<string, never>;

export declare function token<K extends keyof typeof tokens>(tokenID: K, modeName?: never): typeof tokens[K];
export declare function token<K extends keyof typeof modes, M extends keyof typeof modes[K]>(tokenID: K, modeName: M): typeof modes[K][M];
