////
/// Design Tokens
/// Autogenerated from tokens.json.
/// DO NOT EDIT!
////

@use "sass:list";
@use "sass:map";

$__token-values: (
  "color.black": (
    default: (var(--color-black)),
  ),
  "color.blue.10": (
    default: (var(--color-blue-10)),
  ),
  "color.blue.15": (
    default: (var(--color-blue-15)),
  ),
  "color.blue.20": (
    default: (var(--color-blue-20)),
  ),
  "color.blue.25": (
    default: (var(--color-blue-25)),
  ),
  "color.blue.30": (
    default: (var(--color-blue-30)),
  ),
  "color.blue.40": (
    default: (var(--color-blue-40)),
  ),
  "color.blue.50": (
    default: (var(--color-blue-50)),
  ),
  "color.blue.60": (
    default: (var(--color-blue-60)),
  ),
  "color.blue.70": (
    default: (var(--color-blue-70)),
  ),
  "color.blue.80": (
    default: (var(--color-blue-80)),
  ),
  "color.blue.85": (
    default: (var(--color-blue-85)),
  ),
  "color.blue.90": (
    default: (var(--color-blue-90)),
  ),
  "color.blue.95": (
    default: (var(--color-blue-95)),
  ),
  "color.gray.0": (
    default: (var(--color-gray-0)),
  ),
  "color.gray.10": (
    default: (var(--color-gray-10)),
  ),
  "color.gray.15": (
    default: (var(--color-gray-15)),
  ),
  "color.gray.20": (
    default: (var(--color-gray-20)),
  ),
  "color.gray.25": (
    default: (var(--color-gray-25)),
  ),
  "color.gray.30": (
    default: (var(--color-gray-30)),
  ),
  "color.gray.40": (
    default: (var(--color-gray-40)),
  ),
  "color.gray.50": (
    default: (var(--color-gray-50)),
  ),
  "color.gray.60": (
    default: (var(--color-gray-60)),
  ),
  "color.gray.70": (
    default: (var(--color-gray-70)),
  ),
  "color.gray.80": (
    default: (var(--color-gray-80)),
  ),
  "color.gray.85": (
    default: (var(--color-gray-85)),
  ),
  "color.gray.90": (
    default: (var(--color-gray-90)),
  ),
  "color.gray.95": (
    default: (var(--color-gray-95)),
  ),
  "color.gray.100": (
    default: (var(--color-gray-100)),
  ),
  "color.darkGray": (
    default: (var(--color-darkGray)),
  ),
  "color.green": (
    default: (var(--color-green)),
  ),
  "color.purple": (
    default: (var(--color-purple)),
  ),
  "color.red": (
    default: (var(--color-red)),
  ),
  "color.white": (
    default: (var(--color-white)),
  ),
  "color.code.bg.greenShift": (
    default: (var(--color-code-bg-greenShift)),
  ),
  "color.code.gold": (
    default: (var(--color-code-gold)),
  ),
  "color.code.green": (
    default: (var(--color-code-green)),
  ),
  "color.code.orange": (
    default: (var(--color-code-orange)),
  ),
  "color.code.red": (
    default: (var(--color-code-red)),
  ),
  "color.code.pink": (
    default: (var(--color-code-pink)),
  ),
  "color.code.skyBlue": (
    default: (var(--color-code-skyBlue)),
  ),
  "color.ui.contrast.0": (
    default: (var(--color-ui-contrast-0)),
    "light": (var(--color-ui-contrast-0)),
    "dark": (var(--color-ui-contrast-0)),
  ),
  "color.ui.contrast.05": (
    default: (var(--color-ui-contrast-05)),
    "light": (var(--color-ui-contrast-05)),
    "dark": (var(--color-ui-contrast-05)),
  ),
  "color.ui.contrast.10": (
    default: (var(--color-ui-contrast-10)),
    "light": (var(--color-ui-contrast-10)),
    "dark": (var(--color-ui-contrast-10)),
  ),
  "color.ui.contrast.15": (
    default: (var(--color-ui-contrast-15)),
    "light": (var(--color-ui-contrast-15)),
    "dark": (var(--color-ui-contrast-15)),
  ),
  "color.ui.contrast.20": (
    default: (var(--color-ui-contrast-20)),
    "light": (var(--color-ui-contrast-20)),
    "dark": (var(--color-ui-contrast-20)),
  ),
  "color.ui.contrast.30": (
    default: (var(--color-ui-contrast-30)),
    "light": (var(--color-ui-contrast-30)),
    "dark": (var(--color-ui-contrast-30)),
  ),
  "color.ui.contrast.40": (
    default: (var(--color-ui-contrast-40)),
    "light": (var(--color-ui-contrast-40)),
    "dark": (var(--color-ui-contrast-40)),
  ),
  "color.ui.contrast.50": (
    default: (var(--color-ui-contrast-50)),
    "light": (var(--color-ui-contrast-50)),
    "dark": (var(--color-ui-contrast-50)),
  ),
  "color.ui.contrast.60": (
    default: (var(--color-ui-contrast-60)),
    "light": (var(--color-ui-contrast-60)),
    "dark": (var(--color-ui-contrast-60)),
  ),
  "color.ui.contrast.70": (
    default: (var(--color-ui-contrast-70)),
    "light": (var(--color-ui-contrast-70)),
    "dark": (var(--color-ui-contrast-70)),
  ),
  "color.ui.contrast.80": (
    default: (var(--color-ui-contrast-80)),
    "light": (var(--color-ui-contrast-80)),
    "dark": (var(--color-ui-contrast-80)),
  ),
  "color.ui.contrast.85": (
    default: (var(--color-ui-contrast-85)),
    "light": (var(--color-ui-contrast-85)),
    "dark": (var(--color-ui-contrast-85)),
  ),
  "color.ui.contrast.90": (
    default: (var(--color-ui-contrast-90)),
    "light": (var(--color-ui-contrast-90)),
    "dark": (var(--color-ui-contrast-90)),
  ),
  "color.ui.contrast.95": (
    default: (var(--color-ui-contrast-95)),
    "light": (var(--color-ui-contrast-95)),
    "dark": (var(--color-ui-contrast-95)),
  ),
  "color.ui.contrast.100": (
    default: (var(--color-ui-contrast-100)),
    "light": (var(--color-ui-contrast-100)),
    "dark": (var(--color-ui-contrast-100)),
  ),
  "color.ui.action": (
    default: (var(--color-ui-action)),
    "light": (var(--color-ui-action)),
    "dark": (var(--color-ui-action)),
  ),
  "font.family.ppNeue": (
    default: (var(--font-family-ppNeue)),
  ),
  "font.family.mono": (
    default: (var(--font-family-mono)),
  ),
  "font.size.01": (
    default: (var(--font-size-01)),
  ),
  "font.size.02": (
    default: (var(--font-size-02)),
  ),
  "font.size.03": (
    default: (var(--font-size-03)),
  ),
  "font.size.04": (
    default: (var(--font-size-04)),
  ),
  "font.size.05": (
    default: (var(--font-size-05)),
  ),
  "font.size.06": (
    default: (var(--font-size-06)),
  ),
  "font.size.07": (
    default: (var(--font-size-07)),
  ),
  "font.size.08": (
    default: (var(--font-size-08)),
  ),
  "space.4xs": (
    default: (var(--space-4xs)),
  ),
  "space.3xs": (
    default: (var(--space-3xs)),
  ),
  "space.2xs": (
    default: (var(--space-2xs)),
  ),
  "space.xs": (
    default: (var(--space-xs)),
  ),
  "space.sm": (
    default: (var(--space-sm)),
  ),
  "space.md": (
    default: (var(--space-md)),
  ),
  "space.lg": (
    default: (var(--space-lg)),
  ),
  "space.xl": (
    default: (var(--space-xl)),
  ),
  "space.2xl": (
    default: (var(--space-2xl)),
  ),
  "space.3xl": (
    default: (var(--space-3xl)),
  ),
  "space.layout.2xs": (
    default: (var(--space-layout-2xs)),
  ),
  "space.layout.xs": (
    default: (var(--space-layout-xs)),
  ),
  "space.layout.sm": (
    default: (var(--space-layout-sm)),
  ),
  "space.layout.md": (
    default: (var(--space-layout-md)),
  ),
  "space.layout.lg": (
    default: (var(--space-layout-lg)),
  ),
  "space.layout.xl": (
    default: (var(--space-layout-xl)),
  ),
  "space.layout.2xl": (
    default: (var(--space-layout-2xl)),
  ),
  "ease.linear": (
    default: (var(--ease-linear)),
  ),
  "ease.inCirc": (
    default: (var(--ease-inCirc)),
  ),
  "ease.outCirc": (
    default: (var(--ease-outCirc)),
  ),
  "ease.inOutCirc": (
    default: (var(--ease-inOutCirc)),
  ),
  "ease.outCubic": (
    default: (var(--ease-outCubic)),
  ),
  "ease.inCubic": (
    default: (var(--ease-inCubic)),
  ),
  "ease.inOutCubic": (
    default: (var(--ease-inOutCubic)),
  ),
);

$__token-typography-mixins: (
);

@function token($tokenName, $modeName: default) {
  @if map.has-key($__token-values, $tokenName) == false {
    @error "No token named \"#{$tokenName}\"";
  }
  $_token: map.get($__token-values, $tokenName);
  @if map.has-key($_token, "__cobalt-error") {
    @error map.get($_token, "__cobalt-error");
  }
  @if map.has-key($_token, $modeName) {
    @return map.get($_token, $modeName);
  } @else {
    @return map.get($_token, default);
  }
}

@function listModes($tokenName) {
  @if map.has-key($__token-values, $tokenName) == false {
    @error "No token named \"#{$tokenName}\"";
  }
  $_modes: ();
  @each $k in map.get($__token-values, $tokenName) {
    @if $k != "default" {
      $_modes: list.append($_modes, $k);
    }
  }
  @return $_modes;
}

@mixin typography($tokenName, $modeName: default) {
  @if map.has-key($__token-typography-mixins, $tokenName) == false {
    @error "No typography mixin named \"#{$tokenName}\"";
  }
  $_mixin: map.get($__token-typography-mixins, $tokenName);
  $_properties: map.get($_mixin, default);
  @if map.has-key($_mixin, $modeName) {
    $_properties: map.get($_mixin, $modeName);
  }
  @each $_property, $_value in $_properties {
    #{$_property}: #{$_value};
  }
}
