import { describe, expect, it } from 'vitest';
import fs from 'node:fs';
import { execa } from 'execa';
import stripAnsi from 'strip-ansi';

const cmd = '../../../bin/cli.js';

describe('tz build', () => {
  it('default', async () => {
    const cwd = new URL('./fixtures/build-default/', import.meta.url);
    await execa('node', [cmd, 'build'], { cwd });
    const testFile = new URL('./tokens/index.css', cwd);

    // expect generated file exists & isn’t empty
    expect(fs.readFileSync(testFile, 'utf8')).toEqual(
      expect.stringContaining(`/* -------------------------------------------
 *  Autogenerated by ⛋ Terrazzo. DO NOT EDIT!
 * ------------------------------------------- */`),
    );
  });

  describe('errors', () => {
    const errors: [string, { cwd: string; want: string }][] = [
      [
        'no tokens',
        { cwd: 'error-no-tokens', want: '✘  Could not locate tokens.json. To create one, run `npx tz init`.' },
      ],
      [
        'config: no default export',
        {
          cwd: 'error-no-default-export',
          want: '✘  No default export found in terrazzo.config.js. See https://terrazzo.dev/docs/cli for instructions.',
        },
      ],
    ];

    it.each(errors)('%s', async (_, { cwd, want }) => {
      try {
        await execa('node', [cmd, 'build'], { cwd: new URL(`./fixtures/${cwd}/`, import.meta.url) });
        expect(true).toBe(false);
      } catch (err) {
        expect(stripAnsi((err as Error).message)).toMatch(want);
      }
    });
  });

  it('watch', async () => {
    // note: this test is identical to "default"; just duplicated so 2 tests can
    // touch the filesystem without conflicting
    const cwd = new URL('./fixtures/build-watch/', import.meta.url);
    const testFile = new URL('./tokens/index.css', cwd);

    // `--watch` will never terminate, so we want to cancel it after the file is created.
    // execa recommends AbortController rather than child.kill() for better cleanup.
    const controller = new AbortController();
    execa('node', [cmd, 'build', '--watch'], { cwd, cancelSignal: controller.signal, gracefulCancel: true });

    // poll for file creation (note: Vitest will handle timeouts)
    await new Promise((resolve) => {
      setInterval(() => {
        if (fs.existsSync(testFile)) {
          resolve(undefined);
        }
      }, 100);
    });

    // abort process (preferred over child.kill()
    controller.abort();

    // expect file isn’t empty
    expect(fs.readFileSync(testFile, 'utf8')).toEqual(
      expect.stringContaining(`/* -------------------------------------------
 *  Autogenerated by ⛋ Terrazzo. DO NOT EDIT!
 * ------------------------------------------- */`),
    );
  });
});
