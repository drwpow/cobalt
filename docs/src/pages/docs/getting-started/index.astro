---
import {Code} from 'astro/components';
import JSONYaml from '../../../components/JSONYaml.astro';
import Token from '../../../components/Token.astro';
import Layout from '../../../layouts/docs.astro';

const title = 'Getting Started';
---

<Layout content={{title}}>
  <h1>{title}</h1>

  <Code lang="shell" code={`$ npx co build
  ✔  180 tokens built 100ms`} />

  <p>Cobalt turns your <a href="/docs/guides/design-tokens">design tokens</a> into code using a CLI or Node.js. Cobalt is configurable and pluggable, and can generate <a href="/plugins/js">JavaScript</a>, <a href="/plugins/js">TypeScript</a>, <a href="/plugins/js">JSON</a>, <a href="/plugins/css">CSS</a>, and <a href="/plugins/js">Sass</a> via the official <a href="/docs/plugins">plugins</a>. Or you can generate anything else by <a href="/docs/guides/plugins">creating your own plugin</a>.</p>

  <p>Using Cobalt is as easy as:</p>

  <ol>
    <li>Creating a <code>tokens.json</code> file</li>
    <li>Installing Cobalt plugins</li>
    <li>Running the CLI
    <li><i>(Optional)</i> Adding Cobalt to CI</li>
  </ol>

  <h2>1. Creating the <code>tokens.json</code> file</h2>

  <p>
    Converting your tokens to JSON is a manual process of grabbing values from your design files and formatting the JSON yourself. There’s not a great UI for this yet (feel
    free to <a href="https://github.com/drwpow/cobalt-ui/issues">suggest one</a> if you have one you like), but <strong>the Cobalt team is developing one currently</strong>.
  </p>

  <p>Save these all to a <code>tokens.json</code> file (or <code>tokens.yaml</code>, if you prefer YAML) like so:</p>

  <JSONYaml
    code={`{
  "blue": {
    "60": {
      "$type": "color",
      "$value": "oklch(60% 0.216564 269)"
    }
  }
}`}
  />

  <p>You can use the following token types (organizing them into any <a href="/docs/tokens/#groups">Groups</a> you’d like) (<a href="/docs/tokens">docs</a>):</p>

  <ul class="tokens-list">
    <li><a class="token-card" href="/docs/tokens/#color"><Token type="color" /><span class="token-type">Color</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#dimension"><Token type="dimension" /><span class="token-type">Dimension</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#font-family"><Token type="fontFamily" /><span class="token-type">Font Family</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#font-weight"><Token type="fontWeight" /><span class="token-type">Font Weight</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#duration"><Token type="duration" /><span class="token-type">Duration</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#cubic-bezier"><Token type="cubic-bezier" /><span class="token-type">Cubic Bézier</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#number"><Token type="number" /><span class="token-type">Number</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#link"><Token type="link" /><span class="token-type">Link</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#stroke-style"><Token type="stroke-style" /><span class="token-type">Stroke style</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#border"><Token type="border" /><span class="token-type">Border</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#transition"><Token type="transition" /><span class="token-type">Transition</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#shadow"><Token type="shadow" /><span class="token-type">Shadow</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#gradient"><Token type="gradient" /><span class="token-type">Gradient</span></a></li>
    <li><a class="token-card" href="/docs/tokens/#typography"><Token type="typography" /><span class="token-type">Typography</span></a></li>
  </ul>

  <h2>2. Installing Cobalt Plugins</h2>

  <blockquote><p>ℹ️ For this step, you’ll need <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node.js</a> installed (v20 is recommended).</p></blockquote>

  <p>For this example, we’ll install the <a href="/docs/plugins/js">JS</a>, <a href="/docs/plugins/sass">Sass</a>, and <a href="/docs/plugins/css">CSS</a> plugins, but skip any you don’t need (you can always install them later).</p>

  <p>Run the following in a terminal, in the code project folder you’d like to generate code to:</p>

  <Code lang="bash" code="npm i -D @cobalt-ui/plugin-js @cobalt-ui/plugin-css @cobalt-ui/plugin-sass" />

  <h2>3. Running the CLI</h2>

  <p>First install the CLI:</p>

  <Code lang="bash" code="npm i -D @cobalt-ui/cli" />

  <p>Next, in the root of your code project, create a <code>tokens.config.mjs</code> file, importing the plugins you installed in the previous step:</p>

  <Code
    lang="js"
    code={`import pluginCSS from '@cobalt-ui/plugin-css';
import pluginJS from '@cobalt-ui/plugin-js';
import pluginSass from '@cobalt-ui/plugin-sass';

/** @type import('@cobalt-ui/core').Config */
export default {
  tokens: './tokens.json',
  outDir: './tokens/',
  plugins: [
    pluginCSS(/* options */),
    pluginJS(/* options */),
    pluginSass(/* options */),
  ],
};`}
  />

  <p>To learn more about the config file, see <a href="/docs/reference/config">config options</a>. To learn about plugin options, see <a href="/docs/plugins">plugins</a>.</p>

  <p>Lastly, run the following command to generate all code from your tokens:</p>

  <Code lang="bash" code="npx co build" />

  <p>This will output JS, CSS, and Sass in the <code>./tokens/</code> folder (which you can change in your config). It will also alert you of any errors in your schema.</p>

  <h2>4. (optional) Adding Cobalt to CI</h2>

  <p>Using your preferred CI stack, here’s an example of how you could add Cobalt to your CI. First, we’ll take a <code>package.json</code> that had an existing <code>npm run build</code> command, and add <code>co build</code> to it:</p>

  <Code lang="diff" code={`  {
     "scripts": {
-      "build": "npm run build:app",
+      "build": "npm run build:tokens && npm run build:app",
       "build:app": "vite build",
+      "build:tokens": "co build",
     }
  }`} />

  <p><em>Note: this is just a generic example. The important part is that <code>co build</code> is run somehow during the build.</em></p>

  <p>Then add the <code>npm run build</code> command to your preferred CI tool. Here’s an example in GitHub Actions:</p>

  <Code lang="yaml" code={`name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ci-\${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm i
      - run: npm run build`} />

  <p>This will then run <code>co build</code> on every code change. This not only validates your tokens to make sure they’re 100% valid; it also runs all the code plugins so you know if there was an error generating tokens to CSS, etc.</p>

  <p>You could then take the additional step of using a package versioning tool like <a href="https://github.com/changesets/changesets" target="_blank" rel="noopener noreferrer">Changesets</a> to release npm packages from CI (the <a href="https://github.com/drwpow/cobalt-ui/blob/main/.github/workflows/release.yml" target="_blank" rel="noopener noreferrer">the Cobalt GitHub repo</a> uses this to release new package versions automatically).</p>

  <h2>Next steps</h2>

  <ul>
    <li><a href="/docs/tokens">Learn about tokens</a></li>
    <li><a href="/docs/guides/tokens-studio">Sync with Figma using Tokens Studio</a></li>
    <li><a href="/docs/reference/config">Learn how to configure Cobalt</a></li>
    <li><a href="/docs/plugins">Add plugins</a></li>
  </ul>
</Layout>

<style lang="scss">
  @use '../../../../tokens/index' as *;


  .tokens-list {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fill, minmax(12rem, 1fr));
    margin: 0;
    padding: 0;

    li {
      list-style: none !important;
      margin: 0 !important;
      padding: 0 !important;
    }
  }
  .token-card {
    align-items: center;
    border-radius: 1rem;
    border: 2px solid token('color.ui.contrast.20');
    color: token('color.ui.contrast.90');
    display: flex;
    font-size: 1.125rem;
    font-weight: 550;
    gap: 0.75rem;
    padding: 1rem;
    text-decoration: none;
    transition: border-color 100ms linear, color 100ms linear;

    &:hover {
      border-color: token('color.ui.action');
      color: token('color.ui.action');
    }

    :global(.token) {
      transform: translate3d(0, 0, 0);
    }
  }

  .token-type {
    display: block;
  }
</style>
