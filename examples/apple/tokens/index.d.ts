/**
 * Design Tokens
 * Autogenerated from tokens.json.
 * DO NOT EDIT!
 */

import {
  ParsedColorToken,
  ParsedFontFamilyToken,
  ParsedTypographyToken,
} from '@cobalt-ui/core';

export declare const tokens: {
  'color.systemBlue': ParsedColorToken['$value'];
  'color.systemBrown': ParsedColorToken['$value'];
  'color.systemCyan': ParsedColorToken['$value'];
  'color.systemGray': ParsedColorToken['$value'];
  'color.systemGray2': ParsedColorToken['$value'];
  'color.systemGray3': ParsedColorToken['$value'];
  'color.systemGray4': ParsedColorToken['$value'];
  'color.systemGray5': ParsedColorToken['$value'];
  'color.systemGray6': ParsedColorToken['$value'];
  'color.systemGreen': ParsedColorToken['$value'];
  'color.systemIndigo': ParsedColorToken['$value'];
  'color.systemMint': ParsedColorToken['$value'];
  'color.systemOrange': ParsedColorToken['$value'];
  'color.systemPink': ParsedColorToken['$value'];
  'color.systemPurple': ParsedColorToken['$value'];
  'color.systemRed': ParsedColorToken['$value'];
  'color.systemTeal': ParsedColorToken['$value'];
  'color.systemYellow': ParsedColorToken['$value'];
  'font.family.newYork': ParsedFontFamilyToken['$value'];
  'font.family.sfCompact': ParsedFontFamilyToken['$value'];
  'font.family.sfMono': ParsedFontFamilyToken['$value'];
  'font.family.sfPro': ParsedFontFamilyToken['$value'];
  'font.family.sfProRounded': ParsedFontFamilyToken['$value'];
  'font.style.body': ParsedTypographyToken['$value'];
  'font.style.callout': ParsedTypographyToken['$value'];
  'font.style.caption_2': ParsedTypographyToken['$value'];
  'font.style.caption1': ParsedTypographyToken['$value'];
  'font.style.footnote': ParsedTypographyToken['$value'];
  'font.style.headline': ParsedTypographyToken['$value'];
  'font.style.largeTitle': ParsedTypographyToken['$value'];
  'font.style.subhead': ParsedTypographyToken['$value'];
  'font.style.title1': ParsedTypographyToken['$value'];
  'font.style.title2': ParsedTypographyToken['$value'];
  'font.style.title3': ParsedTypographyToken['$value'];
};

export declare const meta: {
  'color.systemBlue': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemBlue'] } };
  'color.systemBrown': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemBrown'] } };
  'color.systemCyan': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemCyan'] } };
  'color.systemGray': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemGray'] } };
  'color.systemGray2': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemGray2'] } };
  'color.systemGray3': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemGray3'] } };
  'color.systemGray4': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemGray4'] } };
  'color.systemGray5': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemGray5'] } };
  'color.systemGray6': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemGray6'] } };
  'color.systemGreen': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemGreen'] } };
  'color.systemIndigo': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemIndigo'] } };
  'color.systemMint': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemMint'] } };
  'color.systemOrange': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemOrange'] } };
  'color.systemPink': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemPink'] } };
  'color.systemPurple': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemPurple'] } };
  'color.systemRed': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemRed'] } };
  'color.systemTeal': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemTeal'] } };
  'color.systemYellow': ParsedColorToken & { $extensions: { mode: typeof modes['color.systemYellow'] } };
  'font.family.newYork': ParsedFontFamilyToken;
  'font.family.sfCompact': ParsedFontFamilyToken;
  'font.family.sfMono': ParsedFontFamilyToken;
  'font.family.sfPro': ParsedFontFamilyToken;
  'font.family.sfProRounded': ParsedFontFamilyToken;
  'font.style.body': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.body'] } };
  'font.style.callout': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.callout'] } };
  'font.style.caption_2': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.caption_2'] } };
  'font.style.caption1': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.caption1'] } };
  'font.style.footnote': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.footnote'] } };
  'font.style.headline': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.headline'] } };
  'font.style.largeTitle': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.largeTitle'] } };
  'font.style.subhead': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.subhead'] } };
  'font.style.title1': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.title1'] } };
  'font.style.title2': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.title2'] } };
  'font.style.title3': ParsedTypographyToken & { $extensions: { mode: typeof modes['font.style.title3'] } };
};

export declare const modes: {
  'color.systemBlue': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemBrown': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemCyan': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemGray': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemGray2': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemGray3': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemGray4': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemGray5': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemGray6': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemGreen': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemIndigo': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemMint': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemOrange': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemPink': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemPurple': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemRed': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemTeal': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'color.systemYellow': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
    light_ax: ParsedColorToken['$value'];
    dark_ax: ParsedColorToken['$value'];
  };
  'font.style.body': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.callout': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.caption_2': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.caption1': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.footnote': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.headline': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.largeTitle': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.subhead': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.title1': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.title2': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
  'font.style.title3': {
    xSmall: ParsedTypographyToken['$value'];
    Small: ParsedTypographyToken['$value'];
    Medium: ParsedTypographyToken['$value'];
    Large: ParsedTypographyToken['$value'];
    xLarge: ParsedTypographyToken['$value'];
    xxLarge: ParsedTypographyToken['$value'];
    xxxLarge: ParsedTypographyToken['$value'];
  };
};

export declare function token<K extends keyof typeof tokens>(tokenID: K, modeName?: never): typeof tokens[K];
export declare function token<K extends keyof typeof modes, M extends keyof typeof modes[K]>(tokenID: K, modeName: M): typeof modes[K][M];
