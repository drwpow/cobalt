/**
 * Design Tokens
 * Autogenerated from tokens.json.
 * DO NOT EDIT!
 */

import {
  ColorToken,
  DimensionToken,
  FontFamilyToken,
  ParsedColorToken,
  ParsedDimensionToken,
  ParsedFontFamilyToken,
} from '@cobalt-ui/core';

export declare const tokens: {
  'color.black': ColorToken['$value'];
  'color.blue': ColorToken['$value'];
  'color.blueDark': ColorToken['$value'];
  'color.blueDarker': ColorToken['$value'];
  'color.blueLight': ColorToken['$value'];
  'color.blueLighter': ColorToken['$value'];
  'color.blueText': ColorToken['$value'];
  'color.green': ColorToken['$value'];
  'color.greenDark': ColorToken['$value'];
  'color.greenDarker': ColorToken['$value'];
  'color.greenLight': ColorToken['$value'];
  'color.greenLighter': ColorToken['$value'];
  'color.greenText': ColorToken['$value'];
  'color.indigo': ColorToken['$value'];
  'color.indigoDark': ColorToken['$value'];
  'color.indigoDarker': ColorToken['$value'];
  'color.indigoLight': ColorToken['$value'];
  'color.indigoLighter': ColorToken['$value'];
  'color.indigoText': ColorToken['$value'];
  'color.ink': ColorToken['$value'];
  'color.inkLight': ColorToken['$value'];
  'color.inkLighter': ColorToken['$value'];
  'color.inkLightest': ColorToken['$value'];
  'color.orange': ColorToken['$value'];
  'color.orangeDark': ColorToken['$value'];
  'color.orangeDarker': ColorToken['$value'];
  'color.orangeLight': ColorToken['$value'];
  'color.orangeLighter': ColorToken['$value'];
  'color.orangeText': ColorToken['$value'];
  'color.purple': ColorToken['$value'];
  'color.purpleDark': ColorToken['$value'];
  'color.purpleDarker': ColorToken['$value'];
  'color.purpleLight': ColorToken['$value'];
  'color.purpleLighter': ColorToken['$value'];
  'color.purpleText': ColorToken['$value'];
  'color.red': ColorToken['$value'];
  'color.redDark': ColorToken['$value'];
  'color.redDarker': ColorToken['$value'];
  'color.redLight': ColorToken['$value'];
  'color.redLighter': ColorToken['$value'];
  'color.redText': ColorToken['$value'];
  'color.sky': ColorToken['$value'];
  'color.skyDark': ColorToken['$value'];
  'color.skyLight': ColorToken['$value'];
  'color.skyLighter': ColorToken['$value'];
  'color.teal': ColorToken['$value'];
  'color.tealDark': ColorToken['$value'];
  'color.tealDarker': ColorToken['$value'];
  'color.tealLight': ColorToken['$value'];
  'color.tealLighter': ColorToken['$value'];
  'color.tealText': ColorToken['$value'];
  'color.white': ColorToken['$value'];
  'color.yellow': ColorToken['$value'];
  'color.yellowDark': ColorToken['$value'];
  'color.yellowDarker': ColorToken['$value'];
  'color.yellowLight': ColorToken['$value'];
  'color.yellowLighter': ColorToken['$value'];
  'color.yellowText': ColorToken['$value'];
  'font.family.base': FontFamilyToken['$value'];
  'font.family.mono': FontFamilyToken['$value'];
  'space.base': DimensionToken['$value'];
  'space.baseTight': DimensionToken['$value'];
  'space.extraLoose': DimensionToken['$value'];
  'space.extraTight': DimensionToken['$value'];
  'space.loose': DimensionToken['$value'];
  'space.none': DimensionToken['$value'];
  'space.tight': DimensionToken['$value'];
};

export declare const meta: {
  'color.black': ParsedColorToken;
  'color.blue': ParsedColorToken;
  'color.blueDark': ParsedColorToken;
  'color.blueDarker': ParsedColorToken;
  'color.blueLight': ParsedColorToken;
  'color.blueLighter': ParsedColorToken;
  'color.blueText': ParsedColorToken;
  'color.green': ParsedColorToken;
  'color.greenDark': ParsedColorToken;
  'color.greenDarker': ParsedColorToken;
  'color.greenLight': ParsedColorToken;
  'color.greenLighter': ParsedColorToken;
  'color.greenText': ParsedColorToken;
  'color.indigo': ParsedColorToken;
  'color.indigoDark': ParsedColorToken;
  'color.indigoDarker': ParsedColorToken;
  'color.indigoLight': ParsedColorToken;
  'color.indigoLighter': ParsedColorToken;
  'color.indigoText': ParsedColorToken;
  'color.ink': ParsedColorToken;
  'color.inkLight': ParsedColorToken;
  'color.inkLighter': ParsedColorToken;
  'color.inkLightest': ParsedColorToken;
  'color.orange': ParsedColorToken;
  'color.orangeDark': ParsedColorToken;
  'color.orangeDarker': ParsedColorToken;
  'color.orangeLight': ParsedColorToken;
  'color.orangeLighter': ParsedColorToken;
  'color.orangeText': ParsedColorToken;
  'color.purple': ParsedColorToken;
  'color.purpleDark': ParsedColorToken;
  'color.purpleDarker': ParsedColorToken;
  'color.purpleLight': ParsedColorToken;
  'color.purpleLighter': ParsedColorToken;
  'color.purpleText': ParsedColorToken;
  'color.red': ParsedColorToken;
  'color.redDark': ParsedColorToken;
  'color.redDarker': ParsedColorToken;
  'color.redLight': ParsedColorToken;
  'color.redLighter': ParsedColorToken;
  'color.redText': ParsedColorToken;
  'color.sky': ParsedColorToken;
  'color.skyDark': ParsedColorToken;
  'color.skyLight': ParsedColorToken;
  'color.skyLighter': ParsedColorToken;
  'color.teal': ParsedColorToken;
  'color.tealDark': ParsedColorToken;
  'color.tealDarker': ParsedColorToken;
  'color.tealLight': ParsedColorToken;
  'color.tealLighter': ParsedColorToken;
  'color.tealText': ParsedColorToken;
  'color.white': ParsedColorToken;
  'color.yellow': ParsedColorToken;
  'color.yellowDark': ParsedColorToken;
  'color.yellowDarker': ParsedColorToken;
  'color.yellowLight': ParsedColorToken;
  'color.yellowLighter': ParsedColorToken;
  'color.yellowText': ParsedColorToken;
  'font.family.base': ParsedFontFamilyToken;
  'font.family.mono': ParsedFontFamilyToken;
  'space.base': ParsedDimensionToken;
  'space.baseTight': ParsedDimensionToken;
  'space.extraLoose': ParsedDimensionToken;
  'space.extraTight': ParsedDimensionToken;
  'space.loose': ParsedDimensionToken;
  'space.none': ParsedDimensionToken;
  'space.tight': ParsedDimensionToken;
};

export declare const modes: Record<string, never>;

export declare function token<K extends keyof typeof tokens>(tokenID: K, modeName?: never): typeof tokens[K];
export declare function token<K extends keyof typeof modes, M extends keyof typeof modes[K]>(tokenID: K, modeName: M): typeof modes[K][M];
