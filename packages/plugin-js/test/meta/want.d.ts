/**
 * Design Tokens
 * Autogenerated from tokens.json.
 * DO NOT EDIT!
 */

import {
  ParsedColorToken,
} from '@cobalt-ui/core';

export declare const tokens: {
  'color.black': ParsedColorToken['$value'];
  'color.blue.00': ParsedColorToken['$value'];
  'color.blue.10': ParsedColorToken['$value'];
  'color.blue.20': ParsedColorToken['$value'];
  'color.blue.30': ParsedColorToken['$value'];
  'color.blue.40': ParsedColorToken['$value'];
  'color.blue.50': ParsedColorToken['$value'];
  'color.blue.60': ParsedColorToken['$value'];
  'color.blue.70': ParsedColorToken['$value'];
  'color.blue.80': ParsedColorToken['$value'];
  'color.blue.90': ParsedColorToken['$value'];
  'color.blue.100': ParsedColorToken['$value'];
  'color.white': ParsedColorToken['$value'];
  'ui.bg': ParsedColorToken['$value'];
  'ui.fg': ParsedColorToken['$value'];
};

export declare const modes: {
  'ui.bg': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
  };
  'ui.fg': {
    light: ParsedColorToken['$value'];
    dark: ParsedColorToken['$value'];
  };
};

export declare function token<K extends keyof typeof tokens>(tokenID: K, modeName?: never): typeof tokens[K];
export declare function token<K extends keyof typeof modes, M extends keyof typeof modes[K]>(tokenID: K, modeName: M): typeof modes[K][M];
